{"task_id": "HumanEval/0", "completion": "for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n```"}
{"task_id": "HumanEval/1", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/2", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/3", "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/4", "completion": "if not numbers:\n        return 0.0"}
{"task_id": "HumanEval/5", "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n```"}
{"task_id": "HumanEval/6", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "if not numbers:\n        return (0, 1)\n    \n    sum_ = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (sum_, product)"}
{"task_id": "HumanEval/9", "completion": "rolling_max_list = []\n    current_max = numbers[0]\n    for number in numbers[1:]:\n        if number > current_max:\n            current_max = number\n        rolling_max_list.append(current_max)\n    return rolling_max_list\n```"}
{"task_id": "HumanEval/10", "completion": "if not string:\n        return string"}
{"task_id": "HumanEval/11", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None"}
{"task_id": "HumanEval/13", "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "# Step 1: Convert the string to lowercase to handle case insensitivity\n    string = string.lower()\n    \n    # Step 2: Use a set to store distinct characters\n    distinct_characters = set()\n    \n    # Step 3: Iterate over each character in the string\n    for char in string:\n        # Step 4: Add the character to the set if it's not already present\n        if char not in distinct_characters:\n            distinct_characters.add(char)\n    \n    # Step 5: Return the number of distinct characters\n    return len(distinct_characters)\n```"}
{"task_id": "HumanEval/17", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/18", "completion": "count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start+len(substring)] == substring:\n            count += 1\n            start += 1\n        else:\n            start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/20", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/21", "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "return len(string)"}
{"task_id": "HumanEval/24", "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # This line should never be reached"}
{"task_id": "HumanEval/25", "completion": "factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n```"}
{"task_id": "HumanEval/26", "completion": "# Your implementation goes here\n```"}
{"task_id": "HumanEval/27", "completion": "return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    for i in range(len(xs) // 2):\n        if xs[i] == 0:\n            return i\n    \n    return -1"}
{"task_id": "HumanEval/33", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/34", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/35", "completion": "if not l:\n        return None\n    max_value = l[0]\n    for num in l:\n        if num > max_value:\n            max_value = num\n    return max_value\n```"}
{"task_id": "HumanEval/36", "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            for j in str(i):\n                if j == '7':\n                    count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/38", "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n        \"\"\" \n        is_prime returns True if num is prime, False otherwise.\n        \"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True"}
{"task_id": "HumanEval/40", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/41", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/42", "completion": "return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_1, fib4_2, fib4_3, fib4_4 = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            fib4_1, fib4_2, fib4_3, fib4_4 = fib4_2, fib4_3, fib4_4, fib4_1 + fib4_2 + fib4_3 + fib4_4\n        return fib4_4\n```"}
{"task_id": "HumanEval/47", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/48", "completion": "# Remove spaces and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the text is equal to its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "if n == 0:\n        return 1\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "return x + y"}
{"task_id": "HumanEval/54", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/55", "completion": "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/57", "completion": "increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/59", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/60", "completion": "total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/62", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/63", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[i - 1] + fibfib_list[i - 2] + fibfib_list[i - 3])\n        return fibfib_list[n]"}
{"task_id": "HumanEval/64", "completion": "vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/66", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/67", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/68", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/69", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/70", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/71", "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/73", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/74", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/75", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/76", "completion": "if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/79", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/80", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/81", "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n```"}
{"task_id": "HumanEval/82", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/83", "completion": "if n == 1:\n        return 1\n    else:\n        # Calculate the count of numbers starting with 1\n        count_starting_with_1 = 9 * (10 ** (n - 1))\n        # Calculate the count of numbers ending with 1\n        count_ending_with_1 = 9 * (10 ** (n - 1))\n        # Calculate the count of numbers starting and ending with 1\n        count_starting_and_ending_with_1 = count_starting_with_1 + count_ending_with_1\n        return count_starting_and_ending_with_1"}
{"task_id": "HumanEval/84", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/85", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/86", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/87", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/88", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/89", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/90", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/91", "completion": "# Split the string into sentences\n    sentences = S.split('.')\n    # Initialize a counter for boredom\n    boredom_count = 0\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            # Increment the boredom counter\n            boredom_count += 1\n    # Return the total boredom count\n    return boredom_count\n```"}
{"task_id": "HumanEval/92", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/93", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/94", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/95", "completion": "if not dict:\n        return False\n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        return True\n    else:\n        return False\n```"}
{"task_id": "HumanEval/96", "completion": "if n < 0:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2, 3]\n    if n % 2 == 0:\n        return []\n    primes = [2]\n    for i in range(3, n + 1, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/98", "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/100", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/101", "completion": "# Split the string by commas or spaces\n    words = s.split(',')\n    return words"}
{"task_id": "HumanEval/102", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/105", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/106", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/107", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/108", "completion": "count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "if not arr:\n        return True"}
{"task_id": "HumanEval/110", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/111", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/112", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/113", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/114", "completion": "if not nums:\n        return 0"}
{"task_id": "HumanEval/115", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/116", "completion": "# Your implementation goes here\n```"}
{"task_id": "HumanEval/117", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/118", "completion": "vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2):\n        if word[i] in vowels and word[i + 1] not in vowels and word[i + 2] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/120", "completion": "```"}
{"task_id": "HumanEval/121", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/122", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/123", "completion": "odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 == 0 else n // 2\n    odd_numbers.append(1)\n    odd_numbers.sort()\n    return odd_numbers\n```"}
{"task_id": "HumanEval/124", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/125", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/126", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/127", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/128", "completion": "if not arr:\n        return None"}
{"task_id": "HumanEval/129", "completion": "```"}
{"task_id": "HumanEval/130", "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci_sequence = [3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci_sequence.append(tribonacci_sequence[-1] + tribonacci_sequence[-2])\n            else:\n                tribonacci_sequence.append(tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3])\n        return tribonacci_sequence"}
{"task_id": "HumanEval/131", "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/133", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/134", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/135", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/136", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/137", "completion": "if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif isinstance(b, str):\n            if b == \".\":\n                return a\n            elif b == \",\":\n                return float(a)\n            else:\n                return None\n        else:\n            return None\n    elif isinstance(a, str):\n        if isinstance(b, (int, float)):\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif isinstance(b, str):\n            if b == \".\":\n                return float(a)\n            elif b == \",\":\n                return float(b)\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/139", "completion": "if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/141", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/142", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/143", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/144", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/145", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/146", "completion": "def isOdd(num):\n        return num % 2 != 0"}
{"task_id": "HumanEval/147", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/148", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/149", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/150", "completion": "if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return None"}
{"task_id": "HumanEval/151", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/152", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/153", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/154", "completion": "\"\"\"\n    # Your code here\n```"}
{"task_id": "HumanEval/155", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/156", "completion": "# Define the Roman numeral symbols and their corresponding values\n    roman_numerals = [\n        ('m', 1000),\n        ('cm', 900),\n        ('d', 500),\n        ('cd', 400),\n        ('c', 100),\n        ('xc', 90),\n        ('l', 50),\n        ('xl', 40),\n        ('x', 10),\n        ('ix', 9),\n        ('v', 5),\n        ('iv', 4),\n        ('i', 1)\n    ]\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate over each Roman numeral symbol and its value\n    for symbol, value in roman_numerals:\n        # While the number is greater than or equal to the value of the symbol\n        while number >= value:\n            # Append the symbol to the result\n            result += symbol\n            # Subtract the value from the number\n            number -= value\n    \n    # Return the result\n    return result"}
{"task_id": "HumanEval/157", "completion": "# Check if the sides form a right-angled triangle\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/159", "completion": "```"}
{"task_id": "HumanEval/160", "completion": "# Your code here\n```"}
{"task_id": "HumanEval/161", "completion": "if not s:\n        return s[::-1]\n    else:\n        return ''.join([char.swapcase() if char.isalpha() else char for char in s])"}
{"task_id": "HumanEval/162", "completion": "if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "# Your code here\n```"}
