{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = []\n    depth = 0"}
{"task_id": "HumanEval/2", "completion": "    # ..."}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three."}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    current_max = numbers[0]\n    for number in numbers[1:]:\n        if number > current_max:\n            current_max = number\n        rolling_max_list.append(current_max)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "# ..."}
{"task_id": "HumanEval/11", "completion": "def main():\n    # Test cases\n    test_cases = [\n        (\"010\", \"110\", \"100\"),\n        (\"111\", \"000\", \"111\"),\n        (\"1010\", \"0101\", \"1111\"),\n        (\"1111\", \"1111\", \"0000\"),\n        (\"0000\", \"0000\", \"0000\"),\n        (\"11111111\", \"00000000\", \"11111111\"),\n        (\"11111111\", \"11111111\", \"00000000\"),\n    ]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "# Example usage:\n# print(string_sequence(0))  # Output: '0'\n# print(string_sequence(5))  # Output: '0 1 2 3 4 5'\n```"}
{"task_id": "HumanEval/16", "completion": "    # Convert the string to lowercase to ensure case insensitivity\n    string = string.lower()\n    # Use a set to store distinct characters\n    distinct_characters = set(string)\n    # Return the number of distinct characters\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last."}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start+len(substring)] == substring:\n            count += 1\n            start += 1\n        else:\n            start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the input string into a list of numbers\n    numbers_list = numbers.split()\n    \n    # Convert the list of strings to a list of integers\n    numbers_list = [int(num) for num in numbers_list]\n    \n    # Sort the list of integers\n    numbers_list.sort()\n    \n    # Convert the sorted list of integers back to a space-delimited string\n    sorted_numbers = ' '.join(map(str, numbers_list))\n    \n    return sorted_numbers"}
{"task_id": "HumanEval/20", "completion": "    pass"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "# ..."}
{"task_id": "HumanEval/32", "completion": "def main():\n    # Test cases\n    assert poly([1, 2], 1) == 3, \"Test case 1 failed\"\n    assert poly([1, 2], 2) == 5, \"Test case 2 failed\"\n    assert poly([1, 2], 3) == 10, \"Test case 3 failed\"\n    assert poly([1, 2], 4) == 20, \"Test case 4 failed\"\n    assert poly([1, 2], 5) == 35, \"Test case 5 failed\"\n    assert poly([1, 2], 6) == 50, \"Test case 6 failed\"\n    assert poly([1, 2], 7) == 65, \"Test case 7 failed\"\n    assert poly([1, 2], 8) == 80, \"Test case 8 failed\"\n    assert poly([1, 2], 9) == 95, \"Test case 9 failed\"\n    assert poly([1, 2], 10) == 100, \"Test case 10 failed\"\n    assert poly([1, 2], 11) == 110, \"Test case 11 failed\"\n    assert poly([1, 2], 12) == 120, \"Test case 12 failed\"\n    assert poly([1, 2], 13) == 130, \"Test case 13 failed\"\n    assert poly([1, 2], 14) == 140, \"Test case 14 failed\"\n    assert poly([1, 2], 15) == 150, \"Test case 15 failed\"\n    assert poly([1, 2], 16) == 160, \"Test case 16 failed\"\n    assert poly([1, 2], 17) == 170, \"Test case 17 failed\"\n    assert poly([1, 2], 18) == 180, \"Test case 18 failed\"\n    assert poly([1, 2], 19) == 190, \"Test case 19 failed\"\n    assert poly([1, 2], 20) == 200, \""}
{"task_id": "HumanEval/33", "completion": "    return sorted(l[::3], key=lambda x: l.index(x))"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for j in str(i):\n                if j == '7':\n                    count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    return sorted(l[::2], key=l[1::2])"}
{"task_id": "HumanEval/38", "completion": "# ..."}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True"}
{"task_id": "HumanEval/40", "completion": "    return False"}
{"task_id": "HumanEval/41", "completion": "    return 0"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    \n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_sequence = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            next_value = sum(fib4_sequence[-4:])\n            fib4_sequence.append(next_value)\n        return fib4_sequence[-1]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * p) % p\n        n = n // 2\n        p = (p * p) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "def main():\n    # Test the encode_shift function\n    test_string = \"Hello, World!\"\n    encoded_string = encode_shift(test_string)\n    print(f\"Encoded: {encoded_string}\")"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    return [i * x for i, x in enumerate(xs[1:], start=1)]"}
{"task_id": "HumanEval/63", "completion": "    # Your code here\n    pass"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word."}
{"task_id": "HumanEval/65", "completion": "    # Your code here\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes."}
{"task_id": "HumanEval/67", "completion": "    # Split the string into two parts: apples and oranges\n    parts = s.split()\n    # Extract the number of apples and oranges from the parts\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    # Calculate the number of mango fruits\n    mango_fruits = n - (apples + oranges)\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "# ..."}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your implementation goes here\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n    return result"}
{"task_id": "HumanEval/71", "completion": "    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "from typing import List"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    i = 0\n    j = n - 1"}
{"task_id": "HumanEval/74", "completion": "from typing import *\nfrom collections import *"}
{"task_id": "HumanEval/75", "completion": "    # Your code here\n    pass"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    if n < 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your implementation goes here\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'."}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False"}
{"task_id": "HumanEval/81", "completion": "    pass"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True"}
{"task_id": "HumanEval/83", "completion": "    # Your code here\n    return 0"}
{"task_id": "HumanEval/84", "completion": "    return \"1\""}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    # Your code here\n    return s"}
{"task_id": "HumanEval/87", "completion": "from typing import List, Tuple"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even."}
{"task_id": "HumanEval/89", "completion": "    return s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted_lst = sorted(set(lst))\n    \n    # Check if there are at least two unique elements\n    if len(unique_sorted_lst) < 2:\n        return None\n    \n    # Return the second element\n    return unique_sorted_lst[1]"}
{"task_id": "HumanEval/91", "completion": "from typing import List"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n            # Find the next vowel in the alphabet\n            next_vowel = chr(ord(char) + 2)\n            while next_vowel in char:\n                next_vowel = chr(ord(next_vowel) + 2)\n            encoded_message += next_vowel\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "from math import sqrt"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the unit digit of each number\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "from typing import *\nfrom collections import *"}
{"task_id": "HumanEval/100", "completion": "    piles = []\n    current_stones = n\n    while current_stones > 0:\n        piles.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return piles"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(',')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1."}
{"task_id": "HumanEval/103", "completion": "# ..."}
{"task_id": "HumanEval/104", "completion": "    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "from typing import List"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "# ..."}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "# ..."}
{"task_id": "HumanEval/110", "completion": "    # Your code here\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    # Your code here\n    return {}"}
{"task_id": "HumanEval/112", "completion": "    # Your code here\n    return (\"\",False)"}
{"task_id": "HumanEval/113", "completion": "    return []"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0"}
{"task_id": "HumanEval/115", "completion": "    # Your code here\n    pass"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in \"aeiouAEIOU\")\n        \n        # If the number of consonants is exactly n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "# ..."}
{"task_id": "HumanEval/119", "completion": "    return 'Yes' if len(lst) == 2 and lst[0] == lst[1] else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "# ..."}
{"task_id": "HumanEval/123", "completion": "    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 == 0 else n // 2\n    odd_numbers.append(1)  # Add 1 to the list if it's odd\n    odd_numbers.sort()  # Sort the list in increasing order\n    return odd_numbers"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Split the text by whitespace\n    words = txt.split()\n    \n    # Split the words by commas\n    words = words.split(',')\n    \n    # Split the words by odd order in the alphabet\n    words = words.split('a', 'z')\n    \n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers."}
{"task_id": "HumanEval/127", "completion": "from math import sqrt"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None"}
{"task_id": "HumanEval/129", "completion": "# ..."}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci_sequence = [3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci_sequence.append(tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3])\n            else:\n                tribonacci_sequence.append(tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3])\n        return tribonacci_sequence"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space."}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "from typing import List, Tuple"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,"}
{"task_id": "HumanEval/138", "completion": "    # Your code here"}
{"task_id": "HumanEval/139", "completion": "# ..."}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace more than 2 consecutive spaces with - \n    text = text.replace(\"  \", \"-\")\n    # Replace remaining spaces with underscores \n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    # Your code here\n    return 'Yes' if len(file_name.split('.')) == 2 and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'"}
{"task_id": "HumanEval/142", "completion": "    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one."}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))"}
{"task_id": "HumanEval/146", "completion": "    def isOddDigit(num):\n        return num % 2 != 0"}
{"task_id": "HumanEval/147", "completion": "    return 0"}
{"task_id": "HumanEval/148", "completion": "# ..."}
{"task_id": "HumanEval/149", "completion": "from typing import List"}
{"task_id": "HumanEval/150", "completion": "    pass"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_squares = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "from typing import List"}
{"task_id": "HumanEval/153", "completion": "from typing import List"}
{"task_id": "HumanEval/154", "completion": "    # Your code here\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "# ..."}
{"task_id": "HumanEval/157", "completion": "    # Check if the sides form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order."}
{"task_id": "HumanEval/159", "completion": "# ..."}
{"task_id": "HumanEval/160", "completion": "    pass"}
{"task_id": "HumanEval/161", "completion": "    return s"}
{"task_id": "HumanEval/162", "completion": "from hashlib import md5"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
